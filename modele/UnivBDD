package modele;

import java.io.File;
import java.io.FileInputStream;
import java.io.FileNotFoundException;
import java.io.FileOutputStream;
import java.io.IOException;
import java.io.ObjectInputStream;
import java.io.ObjectOutputStream;
import java.io.Serializable;
import java.util.concurrent.CopyOnWriteArrayList;

/*La classe UnivBDD est une classe qui permet la manipulation
 * et l'engistrement des comptes utilisateurs*/

public class UnivBDD implements Serializable{

	private static final long serialVersionUID = -8307048125234110661L;

	public static CopyOnWriteArrayList<Utilisateur> comptes;

	public UnivBDD(){
		comptes = new CopyOnWriteArrayList<Utilisateur> ();
		Historique historique = new Historique(); //On utilise le Patron Singleton pour garder une trace des connexions
	};
	
	//Méthode permettant d'ajouter un compte utilisateur
	public void addCompte(Utilisateur ann){
		this.getComptes().add(ann);
		try {
			sauvegarde();
		} catch (IOException e) {
			// TODO Auto-generated catch block
			e.printStackTrace();
		}
	}

	//Méthode permettant de supprimer un compte utilisateur
	public void deleteCompte(String num_Etu) throws ClassNotFoundException{
		for (Utilisateur s : getComptes()) {
			if (s.getNum_Etu().equals(num_Etu)) {
				getComptes().remove(s);
				try {
					sauvegarde();
				} catch (IOException e) {
					// TODO Auto-generated catch block
					e.printStackTrace();
				}
			}
		}
	}

	public CopyOnWriteArrayList<Utilisateur> getComptes() {
		return comptes;
	}

	public Utilisateur getCompte(String num_Etu){
		for(Utilisateur ann : this.getComptes()) {
			if (ann.getNum_Etu().equals(num_Etu)){
				return ann;
			}
		}
		return null;
	}
	
	//Méthode permettant de changer les paramètres d'un compte utilisateur
	public void changeCompte(String num_Etu,String password, String pseudo) throws ClassNotFoundException{
		for(Utilisateur ann : this.getComptes()) {
			if (ann.getNum_Etu().equals(num_Etu)){
				ann.setPassword(password);
				ann.setPseudo(pseudo);
				this.deleteCompte(num_Etu);
				this.addCompte(ann);
				try {
					sauvegarde();
				} catch (IOException e) {
					// TODO Auto-generated catch block
					e.printStackTrace();
				}
			}
		}
	}
	
	//Méthode permettant l'affichage d'un compte utilisateur
	public void affiche(){
		System.out.println("Nombre comptes : " +getComptes().size());
		for (Utilisateur u: this.getComptes() ){
			System.out.println(u);
		}
	}

	//Méthode permettant d'enregistrer les comptes utilisateurs
	public void sauvegarde() throws IOException{
		String userHome = System.getProperty("user.home");
		File fichier =  new File(userHome+"/Desktop/Projet_INFO742/UnivBDD/UnivBDD.txt");

		ObjectOutputStream oos =  new ObjectOutputStream(new FileOutputStream(fichier)) ;

		// sérialization de l'objet
	    oos.writeObject(comptes);
	    oos.flush();
	}

	//Méthode permettant de lire les comptes enregistrés dans les fichiers de l'ordinateur
	public void update() throws FileNotFoundException, IOException, ClassNotFoundException{

		// dans une méthode main
		// on simplifie le code en retirant la gestion des exceptions
		String userHome = System.getProperty("user.home");
		File fichier =  new File(userHome+"/Desktop/Projet_INFO742/UnivBDD/UnivBDD.txt");

		// ouverture d'un flux sur un fichier
		ObjectInputStream ois =  new ObjectInputStream(new FileInputStream(fichier)) ;

		// désérialization de l'objet
		CopyOnWriteArrayList<Utilisateur> m = (CopyOnWriteArrayList<Utilisateur>)ois.readObject();
		comptes = m;
	}

	//Méthode permettant de vérifier que le compte qui essai de se connecter existe bien
	public static boolean connect(String num_Etu, String password) {
		// TODO Auto-generated method stub
		boolean bool = false;
		for (Utilisateur s : comptes) {
			if ((s.getNum_Etu().equals(num_Etu)) && (s.getPassword().equals(password))) {
				bool = true;
				Historique.getInstance().connexion(num_Etu);
			}
		}
		return bool;
	}

	public void setComptes(CopyOnWriteArrayList<Utilisateur> comptes) {
		this.comptes = comptes;
	}
}
