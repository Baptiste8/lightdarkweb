package src;

import static org.junit.Assert.*;

import java.io.File;

import org.junit.After;
import org.junit.Before;
import org.junit.Test;

public class UtilisateurTest {
	protected Utilisateur utilisateur;
	protected Logement logement;
	protected UnivBDD univbdd;
	protected int univtaillebdd;
	protected BDD bdd;
	protected int taillebdd;

	@Before
	//Méthode pour initialiser les classes pour le test
	public void setUp() throws Exception {
		logement = new Logement("0001","ann","des",1.0f);
		bdd = new BDD();
		univbdd = new UnivBDD();
		univbdd.addCompte(new Utilisateur("1234","mdp","Pseudo",bdd,true));
		utilisateur = new Utilisateur("1234","mdp","Pseudo",bdd,false);
		bdd.addAnnonce(logement);
		bdd.sauvegarde();
	}

	@After
	//Méthode pour supprimer le fichier de sauvegarde utilisé pendant les tests
	public void tearDown() throws Exception {
		File fichier1 = new File("D:/Users/jacqueba/Bureau/TestJUnit/src/sauv.txt");
		File fichier2 = new File("D:/Users/jacqueba/Bureau/TestJUnit/src/sauv.txt");
		fichier1.delete();
		fichier2.delete();
	}

	@Test
	//Test prouvant l'utilisateur a était correctement initialiser
	public void testExistenceUtilisateur() throws Exception{
		assertEquals(new String("1234"), 
                utilisateur.getNum_Etu());
		assertEquals(new String("mdp"), 
                utilisateur.getPassword());
		assertEquals(new String("Pseudo"), 
                utilisateur.getPseudo());
	}
	
	@Test
	//Test prouvant que l'on peut sauvegarder dans la base de donnée des comptes correctement
	public void testAjoutCompte() throws Exception{
		univtaillebdd = univbdd.getCompte().size();
		univbdd.addCompte(utilisateur);
		univbdd.sauvegarde();
		univbdd = univbdd.update();
		assertEquals(univbdd.getCompte().size(),
				univtaillebdd+1);
	}
	
	@Test
	//Test prouvant que l'on peut supprimer un compte dans la base de donnée
	public void testDeleteCompte() throws Exception{
		univtaillebdd = univbdd.getCompte().size();
		univbdd.deleteCompte(utilisateur.getNum_Etu());
		univbdd.sauvegarde();
		univbdd = univbdd.update();
		assertEquals(univbdd.getCompte().size(),
				univtaillebdd-1);
	}
	
	@Test
	//Test prouvant qu'on peut modifier un compte dans la base de donnée
	public void testModifyCompte() throws Exception{
		univbdd.affiche();
		univbdd.changeCompte("1234", "pw_modified", "XxX");
		univbdd.affiche();
		assertEquals("1234",
				univbdd.getCompte("1234").getNum_Etu());
		assertEquals("pw_modified",
				univbdd.getCompte("1234").getPassword());
		assertEquals("XxX",
				univbdd.getCompte("1234").getPseudo());
	}
	
	@Test
	//Test prouvant que l'on peut sauvegarder dans la base de donnée des annonces correctement
	public void testAjoutAnnonce() throws Exception{
		taillebdd = bdd.getAnnonces().size();
		bdd.addAnnonce(logement);
		bdd.sauvegarde();
		bdd = bdd.update();
		assertEquals(bdd.getAnnonces().size(),
				taillebdd+1);
	}
	
	@Test
	//Test prouvant que l'on peut supprimer une annonce dans la base de donnée
	public void testDeleteAnnonce() throws Exception{
		taillebdd = bdd.getAnnonces().size();
		bdd.deleteAnnonce(logement.getId());
		bdd.sauvegarde();
		bdd = bdd.update();
		assertEquals(bdd.getAnnonces().size(),
				taillebdd-1);
	}
	
	@Test
	//Test prouvant qu'on peut modifier une annonce dans la base de donnée
	public void testModifyAnnonce() throws Exception{
		bdd.changeAnnonce("0001", "ann2", "des2", 2.0f);
		assertEquals(new String("0001"),
				logement.getId());
		assertEquals(new String("ann2"),
				logement.getName());
		assertEquals(new String("des2"),
				logement.getDescription());
	}

}
